Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROG ID ';' block PERIOD

    3 block: variables cmpdstmt

    4 variables: %empty
    5          | VAR vardcls

    6 vardcls: vardcls vardcl ';'
    7        | vardcl ';'
    8        | error ';'

    9 vardcl: idlist ':' type

   10 idlist: idlist ',' ID
   11       | ID

   12 type: ARRAY '[' ICONST ']' OF stype
   13     | stype

   14 stype: INT
   15      | BOOL

   16 stmtlist: stmtlist ';' stmt
   17         | stmt
   18         | error

   19 stmt: ifstmt
   20     | fstmt
   21     | astmt
   22     | writestmt
   23     | cmpdstmt

   24 cmpdstmt: BEG stmtlist END

   25 $@2: %empty

   26 $@3: %empty

   27 $@4: %empty

   28 $@5: %empty

   29 ifstmt: ifhead $@2 THEN $@3 stmt $@4 ELSE $@5 stmt FI

   30 $@6: %empty

   31 ifhead: IF $@6 condexp

   32 writestmt: PRT '(' exp ')'

   33 $@7: %empty

   34 $@8: %empty

   35 $@9: %empty

   36 $@10: %empty

   37 fstmt: FOR $@7 ctrlexp $@8 DO $@9 stmt $@10 ENDFOR

   38 astmt: lhs ASG exp

   39 lhs: ID
   40    | ID '[' exp ']'

   41 exp: exp '+' exp
   42    | exp '-' exp
   43    | exp '*' exp
   44    | exp AND exp
   45    | exp OR exp
   46    | ID
   47    | ID '[' exp ']'
   48    | ICONST
   49    | TRUE
   50    | FALSE
   51    | error

   52 ctrlexp: ID ASG ICONST ',' ICONST

   53 condexp: exp NEQ exp
   54        | exp EQ exp
   55        | exp LT exp
   56        | exp LEQ exp
   57        | exp GT exp
   58        | exp GEQ exp
   59        | error


Terminals, with rules where they appear

$end (0) 0
'(' (40) 32
')' (41) 32
'*' (42) 43
'+' (43) 41
',' (44) 10 52
'-' (45) 42
':' (58) 9
';' (59) 2 6 7 8 16
'[' (91) 12 40 47
']' (93) 12 40 47
error (256) 8 18 51 59
PROG (258) 2
PERIOD (259) 2
VAR (260) 5
INT (261) 14
BOOL (262) 15
PRT (263) 32
THEN (264) 29
IF (265) 31
DO (266) 37
FI (267) 29
ENDFOR (268) 37
ARRAY (269) 12
OF (270) 12
BEG (271) 24
END (272) 24
ASG (273) 38 52
EQ (274) 54
NEQ (275) 53
LT (276) 55
LEQ (277) 56
GT (278) 57
GEQ (279) 58
AND (280) 44
OR (281) 45
TRUE (282) 49
FALSE (283) 50
ELSE (284) 29
FOR (285) 37
ID (286) 2 10 11 39 40 46 47 52
ICONST (287) 12 48 52


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 2, on right: 0
$@1 (45)
    on left: 1, on right: 2
block (46)
    on left: 3, on right: 2
variables (47)
    on left: 4 5, on right: 3
vardcls (48)
    on left: 6 7 8, on right: 5 6
vardcl (49)
    on left: 9, on right: 6 7
idlist (50)
    on left: 10 11, on right: 9 10
type (51)
    on left: 12 13, on right: 9
stype (52)
    on left: 14 15, on right: 12 13
stmtlist (53)
    on left: 16 17 18, on right: 16 24
stmt (54)
    on left: 19 20 21 22 23, on right: 16 17 29 37
cmpdstmt (55)
    on left: 24, on right: 3 23
ifstmt (56)
    on left: 29, on right: 19
$@2 (57)
    on left: 25, on right: 29
$@3 (58)
    on left: 26, on right: 29
$@4 (59)
    on left: 27, on right: 29
$@5 (60)
    on left: 28, on right: 29
ifhead (61)
    on left: 31, on right: 29
$@6 (62)
    on left: 30, on right: 31
writestmt (63)
    on left: 32, on right: 22
fstmt (64)
    on left: 37, on right: 20
$@7 (65)
    on left: 33, on right: 37
$@8 (66)
    on left: 34, on right: 37
$@9 (67)
    on left: 35, on right: 37
$@10 (68)
    on left: 36, on right: 37
astmt (69)
    on left: 38, on right: 21
lhs (70)
    on left: 39 40, on right: 38
exp (71)
    on left: 41 42 43 44 45 46 47 48 49 50 51, on right: 32 38 40 41
    42 43 44 45 47 53 54 55 56 57 58
ctrlexp (72)
    on left: 52, on right: 37
condexp (73)
    on left: 53 54 55 56 57 58 59, on right: 31


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROG ID ';' block PERIOD

    PROG  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROG . ID ';' block PERIOD

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROG ID . ';' block PERIOD

    ';'  shift, and go to state 6


State 6

    2 program: $@1 PROG ID ';' . block PERIOD

    VAR  shift, and go to state 7

    $default  reduce using rule 4 (variables)

    block      go to state 8
    variables  go to state 9


State 7

    5 variables: VAR . vardcls

    error  shift, and go to state 10
    ID     shift, and go to state 11

    vardcls  go to state 12
    vardcl   go to state 13
    idlist   go to state 14


State 8

    2 program: $@1 PROG ID ';' block . PERIOD

    PERIOD  shift, and go to state 15


State 9

    3 block: variables . cmpdstmt

    BEG  shift, and go to state 16

    cmpdstmt  go to state 17


State 10

    8 vardcls: error . ';'

    ';'  shift, and go to state 18


State 11

   11 idlist: ID .

    $default  reduce using rule 11 (idlist)


State 12

    5 variables: VAR vardcls .
    6 vardcls: vardcls . vardcl ';'

    ID  shift, and go to state 11

    $default  reduce using rule 5 (variables)

    vardcl  go to state 19
    idlist  go to state 14


State 13

    7 vardcls: vardcl . ';'

    ';'  shift, and go to state 20


State 14

    9 vardcl: idlist . ':' type
   10 idlist: idlist . ',' ID

    ':'  shift, and go to state 21
    ','  shift, and go to state 22


State 15

    2 program: $@1 PROG ID ';' block PERIOD .

    $default  reduce using rule 2 (program)


State 16

   24 cmpdstmt: BEG . stmtlist END

    error  shift, and go to state 23
    PRT    shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    FOR    shift, and go to state 26
    ID     shift, and go to state 27

    stmtlist   go to state 28
    stmt       go to state 29
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    writestmt  go to state 33
    fstmt      go to state 34
    astmt      go to state 35
    lhs        go to state 36


State 17

    3 block: variables cmpdstmt .

    $default  reduce using rule 3 (block)


State 18

    8 vardcls: error ';' .

    $default  reduce using rule 8 (vardcls)


State 19

    6 vardcls: vardcls vardcl . ';'

    ';'  shift, and go to state 37


State 20

    7 vardcls: vardcl ';' .

    $default  reduce using rule 7 (vardcls)


State 21

    9 vardcl: idlist ':' . type

    INT    shift, and go to state 38
    BOOL   shift, and go to state 39
    ARRAY  shift, and go to state 40

    type   go to state 41
    stype  go to state 42


State 22

   10 idlist: idlist ',' . ID

    ID  shift, and go to state 43


State 23

   18 stmtlist: error .

    $default  reduce using rule 18 (stmtlist)


State 24

   32 writestmt: PRT . '(' exp ')'

    '('  shift, and go to state 44


State 25

   31 ifhead: IF . $@6 condexp

    $default  reduce using rule 30 ($@6)

    $@6  go to state 45


State 26

   37 fstmt: FOR . $@7 ctrlexp $@8 DO $@9 stmt $@10 ENDFOR

    $default  reduce using rule 33 ($@7)

    $@7  go to state 46


State 27

   39 lhs: ID .
   40    | ID . '[' exp ']'

    '['  shift, and go to state 47

    $default  reduce using rule 39 (lhs)


State 28

   16 stmtlist: stmtlist . ';' stmt
   24 cmpdstmt: BEG stmtlist . END

    END  shift, and go to state 48
    ';'  shift, and go to state 49


State 29

   17 stmtlist: stmt .

    $default  reduce using rule 17 (stmtlist)


State 30

   23 stmt: cmpdstmt .

    $default  reduce using rule 23 (stmt)


State 31

   19 stmt: ifstmt .

    $default  reduce using rule 19 (stmt)


State 32

   29 ifstmt: ifhead . $@2 THEN $@3 stmt $@4 ELSE $@5 stmt FI

    $default  reduce using rule 25 ($@2)

    $@2  go to state 50


State 33

   22 stmt: writestmt .

    $default  reduce using rule 22 (stmt)


State 34

   20 stmt: fstmt .

    $default  reduce using rule 20 (stmt)


State 35

   21 stmt: astmt .

    $default  reduce using rule 21 (stmt)


State 36

   38 astmt: lhs . ASG exp

    ASG  shift, and go to state 51


State 37

    6 vardcls: vardcls vardcl ';' .

    $default  reduce using rule 6 (vardcls)


State 38

   14 stype: INT .

    $default  reduce using rule 14 (stype)


State 39

   15 stype: BOOL .

    $default  reduce using rule 15 (stype)


State 40

   12 type: ARRAY . '[' ICONST ']' OF stype

    '['  shift, and go to state 52


State 41

    9 vardcl: idlist ':' type .

    $default  reduce using rule 9 (vardcl)


State 42

   13 type: stype .

    $default  reduce using rule 13 (type)


State 43

   10 idlist: idlist ',' ID .

    $default  reduce using rule 10 (idlist)


State 44

   32 writestmt: PRT '(' . exp ')'

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 58


State 45

   31 ifhead: IF $@6 . condexp

    error   shift, and go to state 59
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp      go to state 60
    condexp  go to state 61


State 46

   37 fstmt: FOR $@7 . ctrlexp $@8 DO $@9 stmt $@10 ENDFOR

    ID  shift, and go to state 62

    ctrlexp  go to state 63


State 47

   40 lhs: ID '[' . exp ']'

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 64


State 48

   24 cmpdstmt: BEG stmtlist END .

    $default  reduce using rule 24 (cmpdstmt)


State 49

   16 stmtlist: stmtlist ';' . stmt

    PRT  shift, and go to state 24
    IF   shift, and go to state 25
    BEG  shift, and go to state 16
    FOR  shift, and go to state 26
    ID   shift, and go to state 27

    stmt       go to state 65
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    writestmt  go to state 33
    fstmt      go to state 34
    astmt      go to state 35
    lhs        go to state 36


State 50

   29 ifstmt: ifhead $@2 . THEN $@3 stmt $@4 ELSE $@5 stmt FI

    THEN  shift, and go to state 66


State 51

   38 astmt: lhs ASG . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 67


State 52

   12 type: ARRAY '[' . ICONST ']' OF stype

    ICONST  shift, and go to state 68


State 53

   51 exp: error .

    $default  reduce using rule 51 (exp)


State 54

   49 exp: TRUE .

    $default  reduce using rule 49 (exp)


State 55

   50 exp: FALSE .

    $default  reduce using rule 50 (exp)


State 56

   46 exp: ID .
   47    | ID . '[' exp ']'

    '['  shift, and go to state 69

    $default  reduce using rule 46 (exp)


State 57

   48 exp: ICONST .

    $default  reduce using rule 48 (exp)


State 58

   32 writestmt: PRT '(' exp . ')'
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    ')'  shift, and go to state 75


State 59

   51 exp: error .
   59 condexp: error .

    THEN      reduce using rule 59 (condexp)
    $default  reduce using rule 51 (exp)


State 60

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   53 condexp: exp . NEQ exp
   54        | exp . EQ exp
   55        | exp . LT exp
   56        | exp . LEQ exp
   57        | exp . GT exp
   58        | exp . GEQ exp

    EQ   shift, and go to state 76
    NEQ  shift, and go to state 77
    LT   shift, and go to state 78
    LEQ  shift, and go to state 79
    GT   shift, and go to state 80
    GEQ  shift, and go to state 81
    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74


State 61

   31 ifhead: IF $@6 condexp .

    $default  reduce using rule 31 (ifhead)


State 62

   52 ctrlexp: ID . ASG ICONST ',' ICONST

    ASG  shift, and go to state 82


State 63

   37 fstmt: FOR $@7 ctrlexp . $@8 DO $@9 stmt $@10 ENDFOR

    $default  reduce using rule 34 ($@8)

    $@8  go to state 83


State 64

   40 lhs: ID '[' exp . ']'
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    ']'  shift, and go to state 84


State 65

   16 stmtlist: stmtlist ';' stmt .

    $default  reduce using rule 16 (stmtlist)


State 66

   29 ifstmt: ifhead $@2 THEN . $@3 stmt $@4 ELSE $@5 stmt FI

    $default  reduce using rule 26 ($@3)

    $@3  go to state 85


State 67

   38 astmt: lhs ASG exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 38 (astmt)


State 68

   12 type: ARRAY '[' ICONST . ']' OF stype

    ']'  shift, and go to state 86


State 69

   47 exp: ID '[' . exp ']'

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 87


State 70

   44 exp: exp AND . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 88


State 71

   45 exp: exp OR . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 89


State 72

   41 exp: exp '+' . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 90


State 73

   42 exp: exp '-' . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 91


State 74

   43 exp: exp '*' . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 92


State 75

   32 writestmt: PRT '(' exp ')' .

    $default  reduce using rule 32 (writestmt)


State 76

   54 condexp: exp EQ . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 93


State 77

   53 condexp: exp NEQ . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 94


State 78

   55 condexp: exp LT . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 95


State 79

   56 condexp: exp LEQ . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 96


State 80

   57 condexp: exp GT . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 97


State 81

   58 condexp: exp GEQ . exp

    error   shift, and go to state 53
    TRUE    shift, and go to state 54
    FALSE   shift, and go to state 55
    ID      shift, and go to state 56
    ICONST  shift, and go to state 57

    exp  go to state 98


State 82

   52 ctrlexp: ID ASG . ICONST ',' ICONST

    ICONST  shift, and go to state 99


State 83

   37 fstmt: FOR $@7 ctrlexp $@8 . DO $@9 stmt $@10 ENDFOR

    DO  shift, and go to state 100


State 84

   40 lhs: ID '[' exp ']' .

    $default  reduce using rule 40 (lhs)


State 85

   29 ifstmt: ifhead $@2 THEN $@3 . stmt $@4 ELSE $@5 stmt FI

    PRT  shift, and go to state 24
    IF   shift, and go to state 25
    BEG  shift, and go to state 16
    FOR  shift, and go to state 26
    ID   shift, and go to state 27

    stmt       go to state 101
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    writestmt  go to state 33
    fstmt      go to state 34
    astmt      go to state 35
    lhs        go to state 36


State 86

   12 type: ARRAY '[' ICONST ']' . OF stype

    OF  shift, and go to state 102


State 87

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   47    | ID '[' exp . ']'

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    ']'  shift, and go to state 103


State 88

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   44    | exp AND exp .
   45    | exp . OR exp

    OR   shift, and go to state 71
    '*'  shift, and go to state 74

    $default  reduce using rule 44 (exp)


State 89

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   45    | exp OR exp .

    $default  reduce using rule 45 (exp)


State 90

   41 exp: exp . '+' exp
   41    | exp '+' exp .
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp

    OR   shift, and go to state 71
    '*'  shift, and go to state 74

    $default  reduce using rule 41 (exp)


State 91

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   42    | exp '-' exp .
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp

    OR   shift, and go to state 71
    '*'  shift, and go to state 74

    $default  reduce using rule 42 (exp)


State 92

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   43    | exp '*' exp .
   44    | exp . AND exp
   45    | exp . OR exp

    $default  reduce using rule 43 (exp)


State 93

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   54 condexp: exp EQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 54 (condexp)


State 94

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   53 condexp: exp NEQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 53 (condexp)


State 95

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   55 condexp: exp LT exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 55 (condexp)


State 96

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   56 condexp: exp LEQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 56 (condexp)


State 97

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   57 condexp: exp GT exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 57 (condexp)


State 98

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . AND exp
   45    | exp . OR exp
   58 condexp: exp GEQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74

    $default  reduce using rule 58 (condexp)


State 99

   52 ctrlexp: ID ASG ICONST . ',' ICONST

    ','  shift, and go to state 104


State 100

   37 fstmt: FOR $@7 ctrlexp $@8 DO . $@9 stmt $@10 ENDFOR

    $default  reduce using rule 35 ($@9)

    $@9  go to state 105


State 101

   29 ifstmt: ifhead $@2 THEN $@3 stmt . $@4 ELSE $@5 stmt FI

    $default  reduce using rule 27 ($@4)

    $@4  go to state 106


State 102

   12 type: ARRAY '[' ICONST ']' OF . stype

    INT   shift, and go to state 38
    BOOL  shift, and go to state 39

    stype  go to state 107


State 103

   47 exp: ID '[' exp ']' .

    $default  reduce using rule 47 (exp)


State 104

   52 ctrlexp: ID ASG ICONST ',' . ICONST

    ICONST  shift, and go to state 108


State 105

   37 fstmt: FOR $@7 ctrlexp $@8 DO $@9 . stmt $@10 ENDFOR

    PRT  shift, and go to state 24
    IF   shift, and go to state 25
    BEG  shift, and go to state 16
    FOR  shift, and go to state 26
    ID   shift, and go to state 27

    stmt       go to state 109
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    writestmt  go to state 33
    fstmt      go to state 34
    astmt      go to state 35
    lhs        go to state 36


State 106

   29 ifstmt: ifhead $@2 THEN $@3 stmt $@4 . ELSE $@5 stmt FI

    ELSE  shift, and go to state 110


State 107

   12 type: ARRAY '[' ICONST ']' OF stype .

    $default  reduce using rule 12 (type)


State 108

   52 ctrlexp: ID ASG ICONST ',' ICONST .

    $default  reduce using rule 52 (ctrlexp)


State 109

   37 fstmt: FOR $@7 ctrlexp $@8 DO $@9 stmt . $@10 ENDFOR

    $default  reduce using rule 36 ($@10)

    $@10  go to state 111


State 110

   29 ifstmt: ifhead $@2 THEN $@3 stmt $@4 ELSE . $@5 stmt FI

    $default  reduce using rule 28 ($@5)

    $@5  go to state 112


State 111

   37 fstmt: FOR $@7 ctrlexp $@8 DO $@9 stmt $@10 . ENDFOR

    ENDFOR  shift, and go to state 113


State 112

   29 ifstmt: ifhead $@2 THEN $@3 stmt $@4 ELSE $@5 . stmt FI

    PRT  shift, and go to state 24
    IF   shift, and go to state 25
    BEG  shift, and go to state 16
    FOR  shift, and go to state 26
    ID   shift, and go to state 27

    stmt       go to state 114
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    writestmt  go to state 33
    fstmt      go to state 34
    astmt      go to state 35
    lhs        go to state 36


State 113

   37 fstmt: FOR $@7 ctrlexp $@8 DO $@9 stmt $@10 ENDFOR .

    $default  reduce using rule 37 (fstmt)


State 114

   29 ifstmt: ifhead $@2 THEN $@3 stmt $@4 ELSE $@5 stmt . FI

    FI  shift, and go to state 115


State 115

   29 ifstmt: ifhead $@2 THEN $@3 stmt $@4 ELSE $@5 stmt FI .

    $default  reduce using rule 29 (ifstmt)
